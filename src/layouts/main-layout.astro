---
import '@/styles/globals.css'

interface Props {
  title: string;
  description: string;
  path?: string;
}

const { title, description, path = "" } = Astro.props;
---

<html class="scroll-smooth" lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />

    <!-- favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- title -->
    <title>{title}</title>

    <!-- metatags -->
    <meta name="title" content={title} />
    <meta name="description" content={description} />

    <!-- opengraph / fb -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={`${import.meta.env.SITE}/${path}`} />
    <meta property="og:site_name" content="Chunithm Singapore" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="" />

    <!-- twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={`${import.meta.env.SITE}/${path}`} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content="" />
  </head>
  <body>
    <slot />
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }

    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  const isDark = getThemePreference() === "dark";

  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
